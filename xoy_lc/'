#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <arpa/inet.h>

#include "peer.h"
#include "config.h"

#define MESSAGE_CHOKE 0
#define MESSAGE_UNCHOKE 1
#define MESSAGE_INTERESTED 2
#define MESSAGE_NOTINTERESTED 3
#define MESSAGE_HAVE 4
#define MESSAGE_BITFIELD 5
#define MESSAGE_REQUEST 6
#define MESSAGE_PIECE 7
#define MESSAGE_CANCEL 8
// #define MESSAGE_KEEPALIVE 9
//
typedef void (*Function)(char *buf, b_peer *bp);

static void mrecv_choke(char *buf, b_peer *bp);
static void mrecv_unchoke(char *buf, b_peer *bp);
static void mrecv_interested(char *buf, b_peer *bp);
static void mrecv_notinterested(char *buf, b_peer *bp);
static void mrecv_have(char *buf, b_peer *bp);
static void mrecv_bitfield(char *buf, b_peer *bp);
static void mrecv_request(char *buf, b_peer *bp);
static void mrecv_piece(char *buf, b_peer *bp);

static Function message_functions[] = {
  mrecv_choke, mrecv_unchoke, mrecv_interested, mrecv_notinterested, mrecv_have,
  mrecv_bitfield, mrecv_request, mrecv_piece
};

// handshake : <pstrlen><pstr><reserved><info_hash><peer_id>
static size_t message_handshake(char *dst, const char *info_hash, const char *peer_id);
// keep-alive: <len=0000>
static size_t message_keepalive(char *dst);
// choke: <len=0001><id=0>
static size_t message_choke(char *dst);
// unchoke: <len=0001><id=1>
static size_t message_unchoke(char *dst);
// interested: <len=0001><id=2>
static size_t message_interested(char *dst);
// not interested: <len=0001><id=3>
static size_t message_notinterested(char *dst);
// have: <len=0005><id=4><piece index>
static size_t message_have(char *dst, uint32_t index);
// bitfield: <len=0001+X><id=5><bitfield>
// X : bitfield len
static size_t message_bitfield(char *dst, bitmap *bm);
// request: <len=0013><id=6><index><begin><length>
// index: piece index
// begin: offset of piece
// length = 16KB
static size_t message_request(char *dst, uint32_t index, uint32_t begin, uint32_t length);
// piece: <len=0009+X><id=7><index><begin><block>
// X : block len , default 16KB
static size_t message_piece(char *dst, uint32_t index, uint32_t begin, char* block);
// cancel: <len=0013><id=8><index><begin><length>
static size_t message_cancel(char *dst, uint32_t index, uint32_t begin, uint32_t length);
// port: <len=0003><id=9><listen-port>
// size_t message_port(char *dst, uint16_t port);


b_peer* b_peer_init () {
  b_peer* p = malloc(sizeof(b_peer));

  p->next = NULL;
  p->state = MESSAGE_INIT;

  return p;
}

int16_t b_peer_contain (b_peer* head, b_peer* cur) {
  while (NULL != head) {
    if (strcmp(head->ip, cur->ip) == 0 && head->port == cur->port) {
      return 1;
    }
    head = head->next;
  }
  return 0;
}

b_peer* b_peer_init_by_ipport (const char* src) {
  b_peer *bp = b_peer_init();
  struct in_addr addr;

  addr.s_addr = bytes42int(src);
  bp->port = bytes22int(src + 4);
  memcpy(bp->ip, inet_ntoa(addr), 16);
  return bp;
}

void b_peer_free(b_peer* p) {
  free(p);
}

int b_peer_wire_send_message(b_peer* bp, bitmap *bm, const char *info_hash, const char *peer_id) {
  if (bp == NULL) return -1;
  char buf[100];
  size_t len;
  if (bp->state == INIT) {
    len = message_handshake(buf, info_hash, peer_id);
    bp->state = SEND_HANDSHAKED;
  }

  if (bp->state == RECV_HANDSHAKED) {
    len = message_bitfield(buf, bm);
    bp->state = SEND_BITFIELD;
  }

  return 0;
}
int b_peer_wire_recv_message(b_peer* bp, const char *buf) {
  //
}

// static methods
static size_t message_handshake(char *dst, const char *info_hash, const char *peer_id)  {
  dst[0] = sizeof(bittorrent_protocol) - 1;
  memcpy(dst + 1, bittorrent_protocol, sizeof(bittorrent_protocol) - 1);
  memcpy(dst + 20, "00000000", 8);
  memcpy(dst + 28, info_hash, 20);
  memcpy(dst + 48, peer_id, 20);
  return 68;
}

static size_t message_keepalive(char *dst) {
  int2bytes4(dst, 0x00);
  return 4;
}

static size_t message_choke(char *dst) {
  int2bytes4(dst, 0x01);
  int2byte(dst + 4, 0x00);
  return 5;
}

static size_t message_unchoke(char *dst) {
  int2bytes4(dst, 0x01);
  int2byte(dst + 4, 0x01);
  return 5;
}

static size_t message_interested(char *dst) {
  int2bytes4(dst, 0x01);
  int2byte(dst + 4, 0x02);
  return 5;
}

static size_t message_notinterested(char *dst) {
  int2bytes4(dst, 0x01);
  int2byte(dst + 4, 0x03);
  return 5;
}

static size_t message_have(char *dst, uint32_t index) {
  int2bytes4(dst, 0x05);
  int2byte(dst + 4, 0x04);
  int2bytes4(dst + 5, index);
  return 9;
}

static size_t message_bitfield(char *dst, bitmap *bm) {
  int2bytes4(dst, bm->len + 1);
  int2byte(dst + 4, 0x05);
  memcpy(dst + 5, bm->buf, bm->len);
  return 5 + bm->len;
}

static size_t message_request(char *dst, uint32_t index, uint32_t begin, uint32_t length) {
  int2bytes4(dst, 0x13);
  int2byte(dst + 4, 0x06);
  int2bytes4(dst + 5, index);
  int2bytes4(dst + 9, begin);
  int2bytes4(dst + 13, length);
  return 17;
}

static size_t message_piece(char *dst, uint32_t index, uint32_t begin, char* block) {
  int2bytes4(dst, BT_PIECE_BLOCK_LEN + 0x09);
  int2byte(dst + 4, 0x07);
  int2bytes4(dst + 5, index);
  int2bytes4(dst + 9, begin);
  memcpy(dst + 13, block, BT_PIECE_BLOCK_LEN);
  return 13 + BT_PIECE_BLOCK_LEN;
}

static size_t message_cancel(char *dst, uint32_t index, uint32_t begin, uint32_t length) {
  int2bytes4(dst, 0x13);
  int2byte(dst + 4, 0x08);
  int2bytes4(dst + 5, index);
  int2bytes4(dst + 9, begin);
  int2bytes4(dst + 13, length);
  return 17;
}

